(in-package #:spell)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defvar *dictionary*)
  (defun load-dictionary (filename)
    (let ((dictionary (make-instance 'dictionary))
          (stream (open filename)))
      (unwind-protect
           (let ((counter 0)
                 (*dictionary* dictionary))
             (do ((line (read-line stream nil stream)
                        (read-line stream nil stream)))
                 ((eq stream line))
               (unless (eq #\; (aref line 0))
                 (let* ((string (concatenate 'string "(" line ")"))
                        (args (read-from-string string)))
                   (apply #'word :spelling args)
                   (incf counter))))
             dictionary)
        (close stream))))
  (defun lookup (word &optional (dictionary *english-dictionary*))
    (%lookup word dictionary))
  (defun word (&rest arguments &key type spelling &allow-other-keys)
    (let ((arguments (copy-list arguments)))
      (remf arguments :type)
      (insert (apply #'make-instance (gethash type *word-types*) arguments)
              spelling
              *dictionary*))))

(defparameter *english-dictionary*
  #.(load-dictionary (asdf:system-relative-pathname :spell "english.txt")))
